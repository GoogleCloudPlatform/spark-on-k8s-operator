// Code generated by k8s code-generator DO NOT EDIT.

/*
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1beta2

import (
	"time"

	v1beta2 "github.com/GoogleCloudPlatform/spark-on-k8s-operator/pkg/apis/sparkoperator.k8s.io/v1beta2"
	scheme "github.com/GoogleCloudPlatform/spark-on-k8s-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// SparkApplicationClassesGetter has a method to return a SparkApplicationClassInterface.
// A group's client should implement this interface.
type SparkApplicationClassesGetter interface {
	SparkApplicationClasses() SparkApplicationClassInterface
}

// SparkApplicationClassInterface has methods to work with SparkApplicationClass resources.
type SparkApplicationClassInterface interface {
	Create(*v1beta2.SparkApplicationClass) (*v1beta2.SparkApplicationClass, error)
	Update(*v1beta2.SparkApplicationClass) (*v1beta2.SparkApplicationClass, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta2.SparkApplicationClass, error)
	List(opts v1.ListOptions) (*v1beta2.SparkApplicationClassList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta2.SparkApplicationClass, err error)
	SparkApplicationClassExpansion
}

// sparkApplicationClasses implements SparkApplicationClassInterface
type sparkApplicationClasses struct {
	client rest.Interface
}

// newSparkApplicationClasses returns a SparkApplicationClasses
func newSparkApplicationClasses(c *SparkoperatorV1beta2Client) *sparkApplicationClasses {
	return &sparkApplicationClasses{
		client: c.RESTClient(),
	}
}

// Get takes name of the sparkApplicationClass, and returns the corresponding sparkApplicationClass object, and an error if there is any.
func (c *sparkApplicationClasses) Get(name string, options v1.GetOptions) (result *v1beta2.SparkApplicationClass, err error) {
	result = &v1beta2.SparkApplicationClass{}
	err = c.client.Get().
		Resource("sparkapplicationclasses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of SparkApplicationClasses that match those selectors.
func (c *sparkApplicationClasses) List(opts v1.ListOptions) (result *v1beta2.SparkApplicationClassList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta2.SparkApplicationClassList{}
	err = c.client.Get().
		Resource("sparkapplicationclasses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested sparkApplicationClasses.
func (c *sparkApplicationClasses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("sparkapplicationclasses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a sparkApplicationClass and creates it.  Returns the server's representation of the sparkApplicationClass, and an error, if there is any.
func (c *sparkApplicationClasses) Create(sparkApplicationClass *v1beta2.SparkApplicationClass) (result *v1beta2.SparkApplicationClass, err error) {
	result = &v1beta2.SparkApplicationClass{}
	err = c.client.Post().
		Resource("sparkapplicationclasses").
		Body(sparkApplicationClass).
		Do().
		Into(result)
	return
}

// Update takes the representation of a sparkApplicationClass and updates it. Returns the server's representation of the sparkApplicationClass, and an error, if there is any.
func (c *sparkApplicationClasses) Update(sparkApplicationClass *v1beta2.SparkApplicationClass) (result *v1beta2.SparkApplicationClass, err error) {
	result = &v1beta2.SparkApplicationClass{}
	err = c.client.Put().
		Resource("sparkapplicationclasses").
		Name(sparkApplicationClass.Name).
		Body(sparkApplicationClass).
		Do().
		Into(result)
	return
}

// Delete takes name of the sparkApplicationClass and deletes it. Returns an error if one occurs.
func (c *sparkApplicationClasses) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("sparkapplicationclasses").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *sparkApplicationClasses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("sparkapplicationclasses").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched sparkApplicationClass.
func (c *sparkApplicationClasses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta2.SparkApplicationClass, err error) {
	result = &v1beta2.SparkApplicationClass{}
	err = c.client.Patch(pt).
		Resource("sparkapplicationclasses").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
