// Code generated by k8s code-generator DO NOT EDIT.

/*
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/GoogleCloudPlatform/spark-on-k8s-operator/pkg/apis/sparkoperator.k8s.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SparkApplicationClassLister helps list SparkApplicationClasses.
type SparkApplicationClassLister interface {
	// List lists all SparkApplicationClasses in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.SparkApplicationClass, err error)
	// Get retrieves the SparkApplicationClass from the index for a given name.
	Get(name string) (*v1beta1.SparkApplicationClass, error)
	SparkApplicationClassListerExpansion
}

// sparkApplicationClassLister implements the SparkApplicationClassLister interface.
type sparkApplicationClassLister struct {
	indexer cache.Indexer
}

// NewSparkApplicationClassLister returns a new SparkApplicationClassLister.
func NewSparkApplicationClassLister(indexer cache.Indexer) SparkApplicationClassLister {
	return &sparkApplicationClassLister{indexer: indexer}
}

// List lists all SparkApplicationClasses in the indexer.
func (s *sparkApplicationClassLister) List(selector labels.Selector) (ret []*v1beta1.SparkApplicationClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SparkApplicationClass))
	})
	return ret, err
}

// Get retrieves the SparkApplicationClass from the index for a given name.
func (s *sparkApplicationClassLister) Get(name string) (*v1beta1.SparkApplicationClass, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("sparkapplicationclass"), name)
	}
	return obj.(*v1beta1.SparkApplicationClass), nil
}
